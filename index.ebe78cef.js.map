{"mappings":"AGAO,MAAM,EAAgB,AAAC,GAEzB,EAAO,UAAA,CACD,CAAC;;;0CAG8B,EAAE,EAAO,UAAA,CAAW;;QAEtD,CAAC,CAEE,CAAC;;;;;QAKJ,CAAC,CCfI,EAAgB,AAAC,GAEzB,EAAO,UAAA,CACD,CAAC;;;0CAG8B,EAAE,EAAO,UAAA,CAAW;kEACI,EAAE,EAAO,WAAA,CAAY;sDACjC,EAAE,EAAO,SAAA,CAAU;;QAEjE,CAAC,CAEE,CAAC;;;;;QAKJ,CAAC,CEjBI,EAAU,AAAC,IACvB,IAAM,EAAgB,EACpB,KAAA,CAAM,KACN,GAAA,CAAI,AAAC,GAAS,EAAc,MAAM,IAAA,CAAK,KACvC,MAAA,CAAO,AAAC,GACD,aAAa,IAAA,CAAK,IAErB,EAAa,EAAc,GACjC,MAAO,CAAE,WAAA,CAAW,CACrB,EAEM,EAAgB,AAAC,IACtB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAA,CAAQ,IAAK,CACrC,IAAM,EAAU,EAAK,MAAA,CAAO,AAAC,GAAY,IAAY,CAAI,CAAC,EAAE,EAC5D,GAAI,AAAmB,IAAnB,EAAQ,MAAA,CACX,OAAO,CAAI,CAAC,EAAE,AAEhB,CACA,OAAO,IACR,ECnBa,EAAU,AAAC,IACvB,IAAM,EAAU,EAAW,GAErB,EAAgB,EAAiB,GAEjC,EAAa,EAAc,GAEjC,MAAO,CAAE,WAAA,EAAY,YAAa,EAAc,MAA3B,CAAmC,UAAW,EAAQ,MAAnB,AAA0B,CACnF,EAEM,EAAa,AAAC,IACnB,IAAI,EAAU,EAAE,CACZ,EAAO,GACP,EAAe,EACnB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAA,CAAQ,IAC5B,CAAI,CAAC,EAAE,CAAC,KAAA,CAAM,aACjB,EAAe,EACf,GAAQ,CAAI,CAAC,EAAE,CACX,IAAM,EAAK,MAAA,CAAS,IACvB,EAAQ,IAAA,CAAK,GACb,EAAO,MAGa,IAAjB,GACH,EAAQ,IAAA,CAAK,GAEd,EAAO,GACP,KAGF,OAAO,CACR,EAEM,EAAmB,AAAC,IACzB,IAAM,EAAS,EAAE,CACjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAA,CAAQ,IAAK,CACpC,IAAM,EAAO,EAAc,CAAG,CAAC,EAAE,EAC7B,GACH,EAAO,IAAA,CAAK,EAEd,CACA,OAAO,CACR,EAEM,EAAgB,AAAC,IACtB,IAAM,EAAY,CAAC,EACnB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAA,CAAQ,IAC3B,CAAS,CAAC,CAAG,CAAC,EAAE,CAAC,CACpB,CAAS,CAAC,CAAG,CAAC,EAAE,CAAC,GAEjB,CAAS,CAAC,CAAG,CAAC,EAAE,CAAC,CAAG,EAItB,IAAK,IAAM,KAAQ,EAClB,GAAI,AAAoB,IAApB,CAAS,CAAC,EAAK,CAClB,OAAO,EAIT,OAAO,IACR,EN1DM,EAAO,CACZ,KAAM,SAAS,aAAA,CAAc,QAC7B,SAAU,SAAS,aAAA,CAAc,YACjC,cAAe,SAAS,aAAA,CAAc,UACvC,EAEA,EAAK,IAAA,CAAK,gBAAA,CAAiB,SAE3B,SAAgB,CAAC,EAChB,EAAE,cAAF,GACA,IAAM,EAAO,EAAK,QAAA,CAAS,KAAA,CAAM,IAAjC,GAEA,GAAI,AAAS,KAAT,EAAa,CAChB,EAAK,aAAA,CAAc,SAAA,CAAY,4CAC/B,MACD,CAEA,IAAM,EAAS,AAAA,EAAQ,GACjB,EAAU,AAAA,EAAQ,GAElB,EAAS,AAAA,EAAc,GAAU,AAAA,EAAc,EACrD,CAAA,EAAK,aAAA,CAAc,SAAA,CAAY,CAChC","sources":["<anon>","src/index.js","src/js/markup/index.js","src/js/markup/method1.js","src/js/markup/method2.js","src/js/method/index.js","src/js/method/method1.js","src/js/method/method2.js"],"sourcesContent":["const $ab2e3edd11c08aef$export$7b2f176459022922 = (result)=>{\n    let markup = \"\";\n    if (result.uniqueChar) markup = `\r\n        <section class=\"method1\">\r\n\t\t\t<h2>Method1</h2>\r\n\t\t\t<p>Unique character in the text: <span>${result.uniqueChar}</span></p>\r\n\t\t</section>\r\n        `;\n    else markup = `\r\n        <section class=\"method1\">\r\n\t\t\t<h2>Method1</h2>\r\n\t\t\t<p>There are no unique symbols</p>\r\n\t\t</section>\r\n        `;\n    return markup;\n};\n\n\nconst $e396195ec50eb27b$export$7ba3e47dde9ff0b = (result)=>{\n    let markup = \"\";\n    if (result.uniqueChar) markup = `\r\n        <section class=\"method2\">\r\n\t\t\t<h2>Method2</h2>\r\n\t\t\t<p>Unique character in the text: <span>${result.uniqueChar}</span></p>\r\n            <p>The number of unique characters in the text: <span>${result.countUnique}</span></p>\r\n            <p>The number of words in the text: <span>${result.countWord}</span></p>\r\n            </section>\r\n        `;\n    else markup = `\r\n        <section class=\"method2\">\r\n\t\t\t<h2>Method2</h2>\r\n\t\t\t<p>There are no unique symbols</p>\r\n\t\t</section>\r\n        `;\n    return markup;\n};\n\n\n\n\nconst $243fa29863894e3a$export$f865b120e7ac5b7e = (text)=>{\n    const arrUniqueChar = text.split(\" \").map((word)=>$243fa29863894e3a$var$getUniqueChar(Array.from(word))).filter((element)=>{\n        return /^[a-zA-Z]$/.test(element);\n    });\n    const uniqueChar = $243fa29863894e3a$var$getUniqueChar(arrUniqueChar);\n    return {\n        uniqueChar: uniqueChar\n    };\n};\nconst $243fa29863894e3a$var$getUniqueChar = (word)=>{\n    for(let i = 0; i < word.length; i++){\n        const arrChar = word.filter((element)=>element === word[i]);\n        if (arrChar.length === 1) return word[i];\n    }\n    return null;\n};\n\n\nconst $09f6c0784a495f38$export$c50e2791cd62a80a = (text)=>{\n    const arrWord = $09f6c0784a495f38$var$getArrWord(text);\n    const arrUniqueChar = $09f6c0784a495f38$var$getArrUniqueChar(arrWord);\n    const uniqueChar = $09f6c0784a495f38$var$getUniqueChar(arrUniqueChar);\n    return {\n        uniqueChar: uniqueChar,\n        countUnique: arrUniqueChar.length,\n        countWord: arrWord.length\n    };\n};\nconst $09f6c0784a495f38$var$getArrWord = (text)=>{\n    let arrWord = [];\n    let word = \"\";\n    let currentIndex = 1;\n    for(let i = 0; i < text.length; i++)if (text[i].match(/[a-zA-Z]/)) {\n        currentIndex = 1;\n        word += text[i];\n        if (i === text.length - 1) {\n            arrWord.push(word);\n            word = \"\";\n        }\n    } else {\n        if (currentIndex === 1) arrWord.push(word);\n        word = \"\";\n        currentIndex++;\n    }\n    return arrWord;\n};\nconst $09f6c0784a495f38$var$getArrUniqueChar = (arr)=>{\n    const result = [];\n    for(let i = 0; i < arr.length; i++){\n        const char = $09f6c0784a495f38$var$getUniqueChar(arr[i]);\n        if (char) result.push(char);\n    }\n    return result;\n};\nconst $09f6c0784a495f38$var$getUniqueChar = (arr)=>{\n    const countChar = {};\n    for(let i = 0; i < arr.length; i++)if (countChar[arr[i]]) countChar[arr[i]]++;\n    else countChar[arr[i]] = 1;\n    for(const char in countChar){\n        if (countChar[char] === 1) return char;\n    }\n    return null;\n};\n\n\n\n\nconst $35da740d59af89ba$var$refs = {\n    form: document.querySelector(\"form\"),\n    textarea: document.querySelector(\"textarea\"),\n    sectionResult: document.querySelector(\".result\")\n};\n$35da740d59af89ba$var$refs.form.addEventListener(\"submit\", $35da740d59af89ba$var$search);\nfunction $35da740d59af89ba$var$search(e) {\n    e.preventDefault();\n    const text = $35da740d59af89ba$var$refs.textarea.value.trim();\n    if (text === \"\") {\n        $35da740d59af89ba$var$refs.sectionResult.innerHTML = `<h2>You need to enter arbitrary text</h2>`;\n        return;\n    }\n    const result = (0, $243fa29863894e3a$export$f865b120e7ac5b7e)(text);\n    const result2 = (0, $09f6c0784a495f38$export$c50e2791cd62a80a)(text);\n    const markup = (0, $ab2e3edd11c08aef$export$7b2f176459022922)(result) + (0, $e396195ec50eb27b$export$7ba3e47dde9ff0b)(result2);\n    $35da740d59af89ba$var$refs.sectionResult.innerHTML = markup;\n}\n\n\n//# sourceMappingURL=index.ebe78cef.js.map\n","import { markupMethod1, markupMethod2 } from './js/markup';\r\nimport { method1, method2 } from './js/method';\r\n\r\nconst refs = {\r\n\tform: document.querySelector('form'),\r\n\ttextarea: document.querySelector('textarea'),\r\n\tsectionResult: document.querySelector('.result'),\r\n};\r\n\r\nrefs.form.addEventListener('submit', search);\r\n\r\nfunction search(e) {\r\n\te.preventDefault();\r\n\tconst text = refs.textarea.value.trim();\r\n\r\n\tif (text === '') {\r\n\t\trefs.sectionResult.innerHTML = `<h2>You need to enter arbitrary text</h2>`;\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst result = method1(text);\r\n\tconst result2 = method2(text);\r\n\r\n\tconst markup = markupMethod1(result) + markupMethod2(result2);\r\n\trefs.sectionResult.innerHTML = markup;\r\n}\r\n","import { markupMethod1 } from './method1';\r\nimport { markupMethod2 } from './method2';\r\n\r\nexport { markupMethod1, markupMethod2 };\r\n","export const markupMethod1 = (result) => {\r\n\tlet markup = '';\r\n\tif (result.uniqueChar) {\r\n\t\tmarkup = `\r\n        <section class=\"method1\">\r\n\t\t\t<h2>Method1</h2>\r\n\t\t\t<p>Unique character in the text: <span>${result.uniqueChar}</span></p>\r\n\t\t</section>\r\n        `;\r\n\t} else {\r\n\t\tmarkup = `\r\n        <section class=\"method1\">\r\n\t\t\t<h2>Method1</h2>\r\n\t\t\t<p>There are no unique symbols</p>\r\n\t\t</section>\r\n        `;\r\n\t}\r\n\treturn markup;\r\n};\r\n","export const markupMethod2 = (result) => {\r\n\tlet markup = '';\r\n\tif (result.uniqueChar) {\r\n\t\tmarkup = `\r\n        <section class=\"method2\">\r\n\t\t\t<h2>Method2</h2>\r\n\t\t\t<p>Unique character in the text: <span>${result.uniqueChar}</span></p>\r\n            <p>The number of unique characters in the text: <span>${result.countUnique}</span></p>\r\n            <p>The number of words in the text: <span>${result.countWord}</span></p>\r\n            </section>\r\n        `;\r\n\t} else {\r\n\t\tmarkup = `\r\n        <section class=\"method2\">\r\n\t\t\t<h2>Method2</h2>\r\n\t\t\t<p>There are no unique symbols</p>\r\n\t\t</section>\r\n        `;\r\n\t}\r\n\treturn markup;\r\n};\r\n","import { method1 } from './method1';\r\nimport { method2 } from './method2';\r\n\r\nexport { method1, method2 };\r\n","export const method1 = (text) => {\r\n\tconst arrUniqueChar = text\r\n\t\t.split(' ')\r\n\t\t.map((word) => getUniqueChar(Array.from(word)))\r\n\t\t.filter((element) => {\r\n\t\t\treturn /^[a-zA-Z]$/.test(element);\r\n\t\t});\r\n\tconst uniqueChar = getUniqueChar(arrUniqueChar);\r\n\treturn { uniqueChar };\r\n};\r\n\r\nconst getUniqueChar = (word) => {\r\n\tfor (let i = 0; i < word.length; i++) {\r\n\t\tconst arrChar = word.filter((element) => element === word[i]);\r\n\t\tif (arrChar.length === 1) {\r\n\t\t\treturn word[i];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n};\r\n","export const method2 = (text) => {\r\n\tconst arrWord = getArrWord(text);\r\n\r\n\tconst arrUniqueChar = getArrUniqueChar(arrWord);\r\n\r\n\tconst uniqueChar = getUniqueChar(arrUniqueChar);\r\n\r\n\treturn { uniqueChar, countUnique: arrUniqueChar.length, countWord: arrWord.length };\r\n};\r\n\r\nconst getArrWord = (text) => {\r\n\tlet arrWord = [];\r\n\tlet word = '';\r\n\tlet currentIndex = 1;\r\n\tfor (let i = 0; i < text.length; i++) {\r\n\t\tif (text[i].match(/[a-zA-Z]/)) {\r\n\t\t\tcurrentIndex = 1;\r\n\t\t\tword += text[i];\r\n\t\t\tif (i === text.length - 1) {\r\n\t\t\t\tarrWord.push(word);\r\n\t\t\t\tword = '';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (currentIndex === 1) {\r\n\t\t\t\tarrWord.push(word);\r\n\t\t\t}\r\n\t\t\tword = '';\r\n\t\t\tcurrentIndex++;\r\n\t\t}\r\n\t}\r\n\treturn arrWord;\r\n};\r\n\r\nconst getArrUniqueChar = (arr) => {\r\n\tconst result = [];\r\n\tfor (let i = 0; i < arr.length; i++) {\r\n\t\tconst char = getUniqueChar(arr[i]);\r\n\t\tif (char) {\r\n\t\t\tresult.push(char);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n};\r\n\r\nconst getUniqueChar = (arr) => {\r\n\tconst countChar = {};\r\n\tfor (let i = 0; i < arr.length; i++) {\r\n\t\tif (countChar[arr[i]]) {\r\n\t\t\tcountChar[arr[i]]++;\r\n\t\t} else {\r\n\t\t\tcountChar[arr[i]] = 1;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (const char in countChar) {\r\n\t\tif (countChar[char] === 1) {\r\n\t\t\treturn char;\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n"],"names":["$ab2e3edd11c08aef$export$7b2f176459022922","result","uniqueChar","$e396195ec50eb27b$export$7ba3e47dde9ff0b","countUnique","countWord","$243fa29863894e3a$export$f865b120e7ac5b7e","text","arrUniqueChar","split","map","word","$243fa29863894e3a$var$getUniqueChar","Array","from","filter","element","test","i","length","arrChar","$09f6c0784a495f38$export$c50e2791cd62a80a","arrWord","$09f6c0784a495f38$var$getArrWord","$09f6c0784a495f38$var$getArrUniqueChar","$09f6c0784a495f38$var$getUniqueChar","currentIndex","match","push","arr","char","countChar","$35da740d59af89ba$var$refs","form","document","querySelector","textarea","sectionResult","addEventListener","e","preventDefault","value","trim","innerHTML","result2","markup"],"version":3,"file":"index.ebe78cef.js.map"}